{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { r as registerInstance, c as createEvent, h, e as getElement, H as Host } from './index-29df6f59.js';\nimport { b as getIonMode, c as config } from './ionic-global-08f4fb8a.js';\nimport { b as assert } from './helpers-5c745fbd.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-66edb21f.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-685f606a.js';\nimport { a as attachComponent } from './framework-delegate-d1eb6504.js';\nvar VIEW_STATE_NEW = 1;\nvar VIEW_STATE_ATTACHED = 2;\nvar VIEW_STATE_DESTROYED = 3;\n\nvar ViewController =\n/** @class */\nfunction () {\n  function ViewController(component, params) {\n    this.component = component;\n    this.params = params;\n    this.state = VIEW_STATE_NEW;\n  }\n\n  ViewController.prototype.init = function (container) {\n    return __awaiter(this, void 0, void 0, function () {\n      var component, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.state = VIEW_STATE_ATTACHED;\n            if (!!this.element) return [3\n            /*break*/\n            , 2];\n            component = this.component;\n            _a = this;\n            return [4\n            /*yield*/\n            , attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params)];\n\n          case 1:\n            _a.element = _b.sent();\n            _b.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * DOM WRITE\n   */\n\n\n  ViewController.prototype._destroy = function () {\n    assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n    var element = this.element;\n\n    if (element) {\n      if (this.delegate) {\n        this.delegate.removeViewFromDom(element.parentElement, element);\n      } else {\n        element.remove();\n      }\n    }\n\n    this.nav = undefined;\n    this.state = VIEW_STATE_DESTROYED;\n  };\n\n  return ViewController;\n}();\n\nvar matches = function matches(view, id, params) {\n  if (!view) {\n    return false;\n  }\n\n  if (view.component !== id) {\n    return false;\n  }\n\n  var currentParams = view.params;\n\n  if (currentParams === params) {\n    return true;\n  }\n\n  if (!currentParams && !params) {\n    return true;\n  }\n\n  if (!currentParams || !params) {\n    return false;\n  }\n\n  var keysA = Object.keys(currentParams);\n  var keysB = Object.keys(params);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  } // Test for A's keys different from B.\n\n\n  for (var _i = 0, keysA_1 = keysA; _i < keysA_1.length; _i++) {\n    var key = keysA_1[_i];\n\n    if (currentParams[key] !== params[key]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nvar convertToView = function convertToView(page, params) {\n  if (!page) {\n    return null;\n  }\n\n  if (page instanceof ViewController) {\n    return page;\n  }\n\n  return new ViewController(page, params);\n};\n\nvar convertToViews = function convertToViews(pages) {\n  return pages.map(function (page) {\n    if (page instanceof ViewController) {\n      return page;\n    }\n\n    if ('page' in page) {\n      return convertToView(page.page, page.params);\n    }\n\n    return convertToView(page, undefined);\n  }).filter(function (v) {\n    return v !== null;\n  });\n};\n\nvar navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nvar Nav =\n/** @class */\nfunction () {\n  function Nav(hostRef) {\n    registerInstance(this, hostRef);\n    this.transInstr = [];\n    this.animationEnabled = true;\n    this.useRouter = false;\n    this.isTransitioning = false;\n    this.destroyed = false;\n    this.views = [];\n    /**\n     * If `true`, the nav should animate the transition of components.\n     */\n\n    this.animated = true;\n    this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n    this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n    this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n  }\n\n  Nav.prototype.swipeGestureChanged = function () {\n    if (this.gesture) {\n      this.gesture.enable(this.swipeGesture === true);\n    }\n  };\n\n  Nav.prototype.rootChanged = function () {\n    if (this.root !== undefined) {\n      if (!this.useRouter) {\n        this.setRoot(this.root, this.rootParams);\n      }\n    }\n  };\n\n  Nav.prototype.componentWillLoad = function () {\n    this.useRouter = !!document.querySelector('ion-router') && !this.el.closest('[no-router]');\n\n    if (this.swipeGesture === undefined) {\n      var mode = getIonMode(this);\n      this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n    }\n\n    this.ionNavWillLoad.emit();\n  };\n\n  Nav.prototype.componentDidLoad = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.rootChanged();\n            _a = this;\n            return [4\n            /*yield*/\n            , import('./swipe-back-0a6a44c8.js')];\n\n          case 1:\n            _a.gesture = _b.sent().createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n            this.swipeGestureChanged();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Nav.prototype.componentDidUnload = function () {\n    for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n      var view = _a[_i];\n      lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n\n      view._destroy();\n    }\n\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    } // release swipe back gesture and transition\n\n\n    this.transInstr.length = this.views.length = 0;\n    this.destroyed = true;\n  };\n  /**\n   * Push a new component onto the current navigation stack. Pass any additional\n   * information along as an object. This additional information is accessible\n   * through NavParams.\n   *\n   * @param component The component to push onto the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  Nav.prototype.push = function (component, componentProps, opts, done) {\n    return this.queueTrns({\n      insertStart: -1,\n      insertViews: [{\n        page: component,\n        params: componentProps\n      }],\n      opts: opts\n    }, done);\n  };\n  /**\n   * Inserts a component into the navigation stack at the specified index.\n   * This is useful to add a component at any point in the navigation stack.\n   *\n   * @param insertIndex The index to insert the component at in the stack.\n   * @param component The component to insert into the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  Nav.prototype.insert = function (insertIndex, component, componentProps, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: [{\n        page: component,\n        params: componentProps\n      }],\n      opts: opts\n    }, done);\n  };\n  /**\n   * Inserts an array of components into the navigation stack at the specified index.\n   * The last component in the array will become instantiated as a view, and animate\n   * in to become the active view.\n   *\n   * @param insertIndex The index to insert the components at in the stack.\n   * @param insertComponents The components to insert into the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  Nav.prototype.insertPages = function (insertIndex, insertComponents, opts, done) {\n    return this.queueTrns({\n      insertStart: insertIndex,\n      insertViews: insertComponents,\n      opts: opts\n    }, done);\n  };\n  /**\n   * Pop a component off of the navigation stack. Navigates back from the current\n   * component.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  Nav.prototype.pop = function (opts, done) {\n    return this.queueTrns({\n      removeStart: -1,\n      removeCount: 1,\n      opts: opts\n    }, done);\n  };\n  /**\n   * Pop to a specific index in the navigation stack.\n   *\n   * @param indexOrViewCtrl The index or view controller to pop to.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  Nav.prototype.popTo = function (indexOrViewCtrl, opts, done) {\n    var tiConfig = {\n      removeStart: -1,\n      removeCount: -1,\n      opts: opts\n    };\n\n    if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n      tiConfig.removeView = indexOrViewCtrl;\n      tiConfig.removeStart = 1;\n    } else if (typeof indexOrViewCtrl === 'number') {\n      tiConfig.removeStart = indexOrViewCtrl + 1;\n    }\n\n    return this.queueTrns(tiConfig, done);\n  };\n  /**\n   * Navigate back to the root of the stack, no matter how far back that is.\n   *\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  Nav.prototype.popToRoot = function (opts, done) {\n    return this.queueTrns({\n      removeStart: 1,\n      removeCount: -1,\n      opts: opts\n    }, done);\n  };\n  /**\n   * Removes a component from the navigation stack at the specified index.\n   *\n   * @param startIndex The number to begin removal at.\n   * @param removeCount The number of components to remove.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  Nav.prototype.removeIndex = function (startIndex, removeCount, opts, done) {\n    if (removeCount === void 0) {\n      removeCount = 1;\n    }\n\n    return this.queueTrns({\n      removeStart: startIndex,\n      removeCount: removeCount,\n      opts: opts\n    }, done);\n  };\n  /**\n   * Set the root for the current navigation stack to a component.\n   *\n   * @param component The component to set as the root of the navigation stack.\n   * @param componentProps Any properties of the component.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  Nav.prototype.setRoot = function (component, componentProps, opts, done) {\n    return this.setPages([{\n      page: component,\n      params: componentProps\n    }], opts, done);\n  };\n  /**\n   * Set the views of the current navigation stack and navigate to the last view.\n   * By default animations are disabled, but they can be enabled by passing options\n   * to the navigation controller. Navigation parameters can also be passed to the\n   * individual pages in the array.\n   *\n   * @param views The list of views to set as the navigation stack.\n   * @param opts The navigation options.\n   * @param done The transition complete function.\n   */\n\n\n  Nav.prototype.setPages = function (views, opts, done) {\n    if (opts == null) {\n      opts = {};\n    } // if animation wasn't set to true then default it to NOT animate\n\n\n    if (opts.animated !== true) {\n      opts.animated = false;\n    }\n\n    return this.queueTrns({\n      insertStart: 0,\n      insertViews: views,\n      removeStart: 0,\n      removeCount: -1,\n      opts: opts\n    }, done);\n  };\n  /** @internal */\n\n\n  Nav.prototype.setRouteId = function (id, params, direction, animation) {\n    var _this = this;\n\n    var active = this.getActiveSync();\n\n    if (matches(active, id, params)) {\n      return Promise.resolve({\n        changed: false,\n        element: active.element\n      });\n    }\n\n    var resolve;\n    var promise = new Promise(function (r) {\n      return resolve = r;\n    });\n    var finish;\n    var commonOpts = {\n      updateURL: false,\n      viewIsReady: function viewIsReady(enteringEl) {\n        var mark;\n        var p = new Promise(function (r) {\n          return mark = r;\n        });\n        resolve({\n          changed: true,\n          element: enteringEl,\n          markVisible: function markVisible() {\n            return __awaiter(_this, void 0, void 0, function () {\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    mark();\n                    return [4\n                    /*yield*/\n                    , finish];\n\n                  case 1:\n                    _a.sent();\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          }\n        });\n        return p;\n      }\n    };\n\n    if (direction === 'root') {\n      finish = this.setRoot(id, params, commonOpts);\n    } else {\n      var viewController = this.views.find(function (v) {\n        return matches(v, id, params);\n      });\n\n      if (viewController) {\n        finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), {\n          direction: 'back',\n          animationBuilder: animation\n        }));\n      } else if (direction === 'forward') {\n        finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), {\n          animationBuilder: animation\n        }));\n      } else if (direction === 'back') {\n        finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), {\n          direction: 'back',\n          animated: true,\n          animationBuilder: animation\n        }));\n      }\n    }\n\n    return promise;\n  };\n  /** @internal */\n\n\n  Nav.prototype.getRouteId = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var active;\n      return __generator(this, function (_a) {\n        active = this.getActiveSync();\n        return [2\n        /*return*/\n        , active ? {\n          id: active.element.tagName,\n          params: active.params,\n          element: active.element\n        } : undefined];\n      });\n    });\n  };\n  /**\n   * Get the active view.\n   */\n\n\n  Nav.prototype.getActive = function () {\n    return Promise.resolve(this.getActiveSync());\n  };\n  /**\n   * Get the view at the specified index.\n   *\n   * @param index The index of the view.\n   */\n\n\n  Nav.prototype.getByIndex = function (index) {\n    return Promise.resolve(this.views[index]);\n  };\n  /**\n   * Returns `true` if the current view can go back.\n   *\n   * @param view The view to check.\n   */\n\n\n  Nav.prototype.canGoBack = function (view) {\n    return Promise.resolve(this.canGoBackSync(view));\n  };\n  /**\n   * Get the previous view.\n   *\n   * @param view The view to get.\n   */\n\n\n  Nav.prototype.getPrevious = function (view) {\n    return Promise.resolve(this.getPreviousSync(view));\n  };\n\n  Nav.prototype.getLength = function () {\n    return this.views.length;\n  };\n\n  Nav.prototype.getActiveSync = function () {\n    return this.views[this.views.length - 1];\n  };\n\n  Nav.prototype.canGoBackSync = function (view) {\n    if (view === void 0) {\n      view = this.getActiveSync();\n    }\n\n    return !!(view && this.getPreviousSync(view));\n  };\n\n  Nav.prototype.getPreviousSync = function (view) {\n    if (view === void 0) {\n      view = this.getActiveSync();\n    }\n\n    if (!view) {\n      return undefined;\n    }\n\n    var views = this.views;\n    var index = views.indexOf(view);\n    return index > 0 ? views[index - 1] : undefined;\n  }; // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n  // 1. _nextTrns(): consumes the next transition in the queue\n  // 2. _viewInit(): initializes enteringView if required\n  // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n  // 4. _postViewInit(): add/remove the views from the navigation stack\n  // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n  // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n  // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n  // 8. _transitionFinish(): called once the transition finishes\n  // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n\n\n  Nav.prototype.queueTrns = function (ti, done) {\n    if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\n      return Promise.resolve(false);\n    }\n\n    var promise = new Promise(function (resolve, reject) {\n      ti.resolve = resolve;\n      ti.reject = reject;\n    });\n    ti.done = done; // Normalize empty\n\n    if (ti.insertViews && ti.insertViews.length === 0) {\n      ti.insertViews = undefined;\n    } // Enqueue transition instruction\n\n\n    this.transInstr.push(ti); // if there isn't a transition already happening\n    // then this will kick off this transition\n\n    this.nextTrns();\n    return promise;\n  };\n\n  Nav.prototype.success = function (result, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n\n    if (ti.done) {\n      ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n    }\n\n    ti.resolve(result.hasCompleted);\n\n    if (ti.opts.updateURL !== false && this.useRouter) {\n      var router = document.querySelector('ion-router');\n\n      if (router) {\n        var direction = result.direction === 'back' ? 'back' : 'forward';\n        router.navChanged(direction);\n      }\n    }\n  };\n\n  Nav.prototype.failed = function (rejectReason, ti) {\n    if (this.destroyed) {\n      this.fireError('nav controller was destroyed', ti);\n      return;\n    }\n\n    this.transInstr.length = 0;\n    this.fireError(rejectReason, ti);\n  };\n\n  Nav.prototype.fireError = function (rejectReason, ti) {\n    if (ti.done) {\n      ti.done(false, false, rejectReason);\n    }\n\n    if (ti.reject && !this.destroyed) {\n      ti.reject(rejectReason);\n    } else {\n      ti.resolve(false);\n    }\n  };\n\n  Nav.prototype.nextTrns = function () {\n    // this is the framework's bread 'n butta function\n    // only one transition is allowed at any given time\n    if (this.isTransitioning) {\n      return false;\n    } // there is no transition happening right now\n    // get the next instruction\n\n\n    var ti = this.transInstr.shift();\n\n    if (!ti) {\n      return false;\n    }\n\n    this.runTransition(ti);\n    return true;\n  };\n\n  Nav.prototype.runTransition = function (ti) {\n    return __awaiter(this, void 0, void 0, function () {\n      var leavingView, enteringView, requiresTransition, isBackDirection, result, _a, rejectReason_1;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 6,, 7]); // set that this nav is actively transitioning\n\n\n            this.ionNavWillChange.emit();\n            this.isTransitioning = true;\n            this.prepareTI(ti);\n            leavingView = this.getActiveSync();\n            enteringView = this.getEnteringView(ti, leavingView);\n\n            if (!leavingView && !enteringView) {\n              throw new Error('no views in the stack to be removed');\n            }\n\n            if (!(enteringView && enteringView.state === VIEW_STATE_NEW)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , enteringView.init(this.el)];\n\n          case 1:\n            _b.sent();\n\n            _b.label = 2;\n\n          case 2:\n            this.postViewInit(enteringView, leavingView, ti);\n            requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) && enteringView !== leavingView;\n\n            if (requiresTransition && ti.opts && leavingView) {\n              isBackDirection = ti.opts.direction === 'back';\n              /**\n               * If heading back, use the entering page's animation\n               * unless otherwise specified by the developer.\n               */\n\n              if (isBackDirection) {\n                ti.opts.animationBuilder = ti.opts.animationBuilder || enteringView && enteringView.animationBuilder;\n              }\n\n              leavingView.animationBuilder = ti.opts.animationBuilder;\n            }\n\n            if (!requiresTransition) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this.transition(enteringView, leavingView, ti)];\n\n          case 3:\n            _a = _b.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            _a = {\n              // transition is not required, so we are already done!\n              // they're inserting/removing the views somewhere in the middle or\n              // beginning, so visually nothing needs to animate/transition\n              // resolve immediately because there's no animation that's happening\n              hasCompleted: true,\n              requiresTransition: false\n            };\n            _b.label = 5;\n\n          case 5:\n            result = _a;\n            this.success(result, ti);\n            this.ionNavDidChange.emit();\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            rejectReason_1 = _b.sent();\n            this.failed(rejectReason_1, ti);\n            return [3\n            /*break*/\n            , 7];\n\n          case 7:\n            this.isTransitioning = false;\n            this.nextTrns();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Nav.prototype.prepareTI = function (ti) {\n    var viewsLength = this.views.length;\n    ti.opts = ti.opts || {};\n\n    if (ti.opts.delegate === undefined) {\n      ti.opts.delegate = this.delegate;\n    }\n\n    if (ti.removeView !== undefined) {\n      assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n      assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n      var index = this.views.indexOf(ti.removeView);\n\n      if (index < 0) {\n        throw new Error('removeView was not found');\n      }\n\n      ti.removeStart += index;\n    }\n\n    if (ti.removeStart !== undefined) {\n      if (ti.removeStart < 0) {\n        ti.removeStart = viewsLength - 1;\n      }\n\n      if (ti.removeCount < 0) {\n        ti.removeCount = viewsLength - ti.removeStart;\n      }\n\n      ti.leavingRequiresTransition = ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n    }\n\n    if (ti.insertViews) {\n      // allow -1 to be passed in to auto push it on the end\n      // and clean up the index if it's larger then the size of the stack\n      if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n        ti.insertStart = viewsLength;\n      }\n\n      ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n    }\n\n    var insertViews = ti.insertViews;\n\n    if (!insertViews) {\n      return;\n    }\n\n    assert(insertViews.length > 0, 'length can not be zero');\n    var viewControllers = convertToViews(insertViews);\n\n    if (viewControllers.length === 0) {\n      throw new Error('invalid views to insert');\n    } // Check all the inserted view are correct\n\n\n    for (var _i = 0, viewControllers_1 = viewControllers; _i < viewControllers_1.length; _i++) {\n      var view = viewControllers_1[_i];\n      view.delegate = ti.opts.delegate;\n      var nav = view.nav;\n\n      if (nav && nav !== this) {\n        throw new Error('inserted view was already inserted');\n      }\n\n      if (view.state === VIEW_STATE_DESTROYED) {\n        throw new Error('inserted view was already destroyed');\n      }\n    }\n\n    ti.insertViews = viewControllers;\n  };\n\n  Nav.prototype.getEnteringView = function (ti, leavingView) {\n    var insertViews = ti.insertViews;\n\n    if (insertViews !== undefined) {\n      // grab the very last view of the views to be inserted\n      // and initialize it as the new entering view\n      return insertViews[insertViews.length - 1];\n    }\n\n    var removeStart = ti.removeStart;\n\n    if (removeStart !== undefined) {\n      var views = this.views;\n      var removeEnd = removeStart + ti.removeCount;\n\n      for (var i = views.length - 1; i >= 0; i--) {\n        var view = views[i];\n\n        if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n          return view;\n        }\n      }\n    }\n\n    return undefined;\n  };\n\n  Nav.prototype.postViewInit = function (enteringView, leavingView, ti) {\n    assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n    assert(ti.resolve, 'resolve must be valid');\n    assert(ti.reject, 'reject must be valid');\n    var opts = ti.opts;\n    var insertViews = ti.insertViews;\n    var removeStart = ti.removeStart;\n    var removeCount = ti.removeCount;\n    var destroyQueue; // there are views to remove\n\n    if (removeStart !== undefined && removeCount !== undefined) {\n      assert(removeStart >= 0, 'removeStart can not be negative');\n      assert(removeCount >= 0, 'removeCount can not be negative');\n      destroyQueue = [];\n\n      for (var i = 0; i < removeCount; i++) {\n        var view = this.views[i + removeStart];\n\n        if (view && view !== enteringView && view !== leavingView) {\n          destroyQueue.push(view);\n        }\n      } // default the direction to \"back\"\n\n\n      opts.direction = opts.direction || 'back';\n    }\n\n    var finalBalance = this.views.length + (insertViews !== undefined ? insertViews.length : 0) - (removeCount !== undefined ? removeCount : 0);\n    assert(finalBalance >= 0, 'final balance can not be negative');\n\n    if (finalBalance === 0) {\n      console.warn(\"You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.\", this, this.el);\n      throw new Error('navigation stack needs at least one root page');\n    } // At this point the transition can not be rejected, any throw should be an error\n    // there are views to insert\n\n\n    if (insertViews) {\n      // add the views to the\n      var insertIndex = ti.insertStart;\n\n      for (var _i = 0, insertViews_1 = insertViews; _i < insertViews_1.length; _i++) {\n        var view = insertViews_1[_i];\n        this.insertViewAt(view, insertIndex);\n        insertIndex++;\n      }\n\n      if (ti.enteringRequiresTransition) {\n        // default to forward if not already set\n        opts.direction = opts.direction || 'forward';\n      }\n    } // if the views to be removed are in the beginning or middle\n    // and there is not a view that needs to visually transition out\n    // then just destroy them and don't transition anything\n    // batch all of lifecycles together\n    // let's make sure, callbacks are zoned\n\n\n    if (destroyQueue && destroyQueue.length > 0) {\n      for (var _a = 0, destroyQueue_1 = destroyQueue; _a < destroyQueue_1.length; _a++) {\n        var view = destroyQueue_1[_a];\n        lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n        lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n        lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n      } // once all lifecycle events has been delivered, we can safely detroy the views\n\n\n      for (var _b = 0, destroyQueue_2 = destroyQueue; _b < destroyQueue_2.length; _b++) {\n        var view = destroyQueue_2[_b];\n        this.destroyView(view);\n      }\n    }\n  };\n\n  Nav.prototype.transition = function (enteringView, leavingView, ti) {\n    return __awaiter(this, void 0, void 0, function () {\n      var opts, progressCallback, mode, enteringEl, leavingEl, animationOpts, hasCompleted;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            opts = ti.opts;\n            progressCallback = opts.progressAnimation ? function (ani) {\n              return _this.sbAni = ani;\n            } : undefined;\n            mode = getIonMode(this);\n            enteringEl = enteringView.element;\n            leavingEl = leavingView && leavingView.element;\n            animationOpts = Object.assign({\n              mode: mode,\n              showGoBack: this.canGoBackSync(enteringView),\n              baseEl: this.el,\n              animationBuilder: this.animation || opts.animationBuilder || config.get('navAnimation'),\n              progressCallback: progressCallback,\n              animated: this.animated && config.getBoolean('animated', true),\n              enteringEl: enteringEl,\n              leavingEl: leavingEl\n            }, opts);\n            return [4\n            /*yield*/\n            , transition(animationOpts)];\n\n          case 1:\n            hasCompleted = _a.sent().hasCompleted;\n            return [2\n            /*return*/\n            , this.transitionFinish(hasCompleted, enteringView, leavingView, opts)];\n        }\n      });\n    });\n  };\n\n  Nav.prototype.transitionFinish = function (hasCompleted, enteringView, leavingView, opts) {\n    var cleanupView = hasCompleted ? enteringView : leavingView;\n\n    if (cleanupView) {\n      this.cleanup(cleanupView);\n    }\n\n    return {\n      hasCompleted: hasCompleted,\n      requiresTransition: true,\n      enteringView: enteringView,\n      leavingView: leavingView,\n      direction: opts.direction\n    };\n  };\n\n  Nav.prototype.insertViewAt = function (view, index) {\n    var views = this.views;\n    var existingIndex = views.indexOf(view);\n\n    if (existingIndex > -1) {\n      // this view is already in the stack!!\n      // move it to its new location\n      assert(view.nav === this, 'view is not part of the nav');\n      views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n    } else {\n      assert(!view.nav, 'nav is used'); // this is a new view to add to the stack\n      // create the new entering view\n\n      view.nav = this; // insert the entering view into the correct index in the stack\n\n      views.splice(index, 0, view);\n    }\n  };\n\n  Nav.prototype.removeView = function (view) {\n    assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n    var views = this.views;\n    var index = views.indexOf(view);\n    assert(index > -1, 'view must be part of the stack');\n\n    if (index >= 0) {\n      views.splice(index, 1);\n    }\n  };\n\n  Nav.prototype.destroyView = function (view) {\n    view._destroy();\n\n    this.removeView(view);\n  };\n  /**\n   * DOM WRITE\n   */\n\n\n  Nav.prototype.cleanup = function (activeView) {\n    // ok, cleanup time!! Destroy all of the views that are\n    // INACTIVE and come after the active view\n    // only do this if the views exist, though\n    if (this.destroyed) {\n      return;\n    }\n\n    var views = this.views;\n    var activeViewIndex = views.indexOf(activeView);\n\n    for (var i = views.length - 1; i >= 0; i--) {\n      var view = views[i];\n      var element = view.element;\n\n      if (i > activeViewIndex) {\n        // this view comes after the active view\n        // let's unload it\n        lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n        this.destroyView(view);\n      } else if (i < activeViewIndex) {\n        // this view comes before the active view\n        // and it is not a portal then ensure it is hidden\n        setPageHidden(element, true);\n      }\n    }\n  };\n\n  Nav.prototype.canStart = function () {\n    return !!this.swipeGesture && !this.isTransitioning && this.transInstr.length === 0 && this.animationEnabled && this.canGoBackSync();\n  };\n\n  Nav.prototype.onStart = function () {\n    this.queueTrns({\n      removeStart: -1,\n      removeCount: 1,\n      opts: {\n        direction: 'back',\n        progressAnimation: true\n      }\n    }, undefined);\n  };\n\n  Nav.prototype.onMove = function (stepValue) {\n    if (this.sbAni) {\n      this.sbAni.progressStep(stepValue);\n    }\n  };\n\n  Nav.prototype.onEnd = function (shouldComplete, stepValue, dur) {\n    var _this = this;\n\n    if (this.sbAni) {\n      this.animationEnabled = false;\n      this.sbAni.onFinish(function () {\n        _this.animationEnabled = true;\n      }, {\n        oneTimeCallback: true\n      }); // Account for rounding errors in JS\n\n      var newStepValue = shouldComplete ? -0.001 : 0.001;\n      /**\n       * Animation will be reversed here, so need to\n       * reverse the easing curve as well\n       *\n       * Additionally, we need to account for the time relative\n       * to the new easing curve, as `stepValue` is going to be given\n       * in terms of a linear curve.\n       */\n\n      if (!shouldComplete) {\n        this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n        newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n      } else {\n        newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n      }\n\n      this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n    }\n  };\n\n  Nav.prototype.render = function () {\n    return h(\"slot\", null);\n  };\n\n  Object.defineProperty(Nav.prototype, \"el\", {\n    get: function get() {\n      return getElement(this);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Nav, \"watchers\", {\n    get: function get() {\n      return {\n        \"swipeGesture\": [\"swipeGestureChanged\"],\n        \"root\": [\"rootChanged\"]\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Nav;\n}();\n\nNav.style = navCss;\n\nvar navLink = function navLink(el, routerDirection, component, componentProps, routerAnimation) {\n  var nav = el.closest('ion-nav');\n\n  if (nav) {\n    if (routerDirection === 'forward') {\n      if (component !== undefined) {\n        return nav.push(component, componentProps, {\n          skipIfBusy: true,\n          animationBuilder: routerAnimation\n        });\n      }\n    } else if (routerDirection === 'root') {\n      if (component !== undefined) {\n        return nav.setRoot(component, componentProps, {\n          skipIfBusy: true,\n          animationBuilder: routerAnimation\n        });\n      }\n    } else if (routerDirection === 'back') {\n      return nav.pop({\n        skipIfBusy: true,\n        animationBuilder: routerAnimation\n      });\n    }\n  }\n\n  return Promise.resolve(false);\n};\n\nvar NavLink =\n/** @class */\nfunction () {\n  function NavLink(hostRef) {\n    var _this = this;\n\n    registerInstance(this, hostRef);\n    /**\n     * The transition direction when navigating to another page.\n     */\n\n    this.routerDirection = 'forward';\n\n    this.onClick = function () {\n      return navLink(_this.el, _this.routerDirection, _this.component, _this.componentProps, _this.routerAnimation);\n    };\n  }\n\n  NavLink.prototype.render = function () {\n    return h(Host, {\n      onClick: this.onClick\n    });\n  };\n\n  Object.defineProperty(NavLink.prototype, \"el\", {\n    get: function get() {\n      return getElement(this);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return NavLink;\n}();\n\nexport { Nav as ion_nav, NavLink as ion_nav_link };","map":{"version":3,"sources":["/home/bigboy/Study/development/rect+ionic/ionic-react/node_modules/@ionic/core/dist/esm-es5/ion-nav_2.entry.js"],"names":["__awaiter","__generator","r","registerInstance","c","createEvent","h","e","getElement","H","Host","b","getIonMode","config","assert","l","lifecycle","t","transition","s","setPageHidden","d","LIFECYCLE_WILL_UNLOAD","LIFECYCLE_WILL_LEAVE","LIFECYCLE_DID_LEAVE","g","getTimeGivenProgression","a","attachComponent","VIEW_STATE_NEW","VIEW_STATE_ATTACHED","VIEW_STATE_DESTROYED","ViewController","component","params","state","prototype","init","container","_a","_b","label","element","delegate","sent","_destroy","removeViewFromDom","parentElement","remove","nav","undefined","matches","view","id","currentParams","keysA","Object","keys","keysB","length","_i","keysA_1","key","convertToView","page","convertToViews","pages","map","filter","v","navCss","Nav","hostRef","transInstr","animationEnabled","useRouter","isTransitioning","destroyed","views","animated","ionNavWillLoad","ionNavWillChange","ionNavDidChange","swipeGestureChanged","gesture","enable","swipeGesture","rootChanged","root","setRoot","rootParams","componentWillLoad","document","querySelector","el","closest","mode","getBoolean","emit","componentDidLoad","createSwipeBackGesture","canStart","bind","onStart","onMove","onEnd","componentDidUnload","destroy","push","componentProps","opts","done","queueTrns","insertStart","insertViews","insert","insertIndex","insertPages","insertComponents","pop","removeStart","removeCount","popTo","indexOrViewCtrl","tiConfig","removeView","popToRoot","removeIndex","startIndex","setPages","setRouteId","direction","animation","_this","active","getActiveSync","Promise","resolve","changed","promise","finish","commonOpts","updateURL","viewIsReady","enteringEl","mark","p","markVisible","viewController","find","assign","animationBuilder","getRouteId","tagName","getActive","getByIndex","index","canGoBack","canGoBackSync","getPrevious","getPreviousSync","getLength","indexOf","ti","skipIfBusy","reject","nextTrns","success","result","fireError","hasCompleted","requiresTransition","enteringView","leavingView","router","navChanged","failed","rejectReason","shift","runTransition","isBackDirection","rejectReason_1","trys","prepareTI","getEnteringView","Error","postViewInit","enteringRequiresTransition","leavingRequiresTransition","viewsLength","viewControllers","viewControllers_1","removeEnd","i","destroyQueue","finalBalance","console","warn","insertViews_1","insertViewAt","destroyQueue_1","destroyQueue_2","destroyView","progressCallback","leavingEl","animationOpts","progressAnimation","ani","sbAni","showGoBack","baseEl","get","transitionFinish","cleanupView","cleanup","existingIndex","splice","activeView","activeViewIndex","stepValue","progressStep","shouldComplete","dur","onFinish","oneTimeCallback","newStepValue","easing","progressEnd","render","defineProperty","enumerable","configurable","style","navLink","routerDirection","routerAnimation","NavLink","onClick","ion_nav","ion_nav_link"],"mappings":"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","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { r as registerInstance, c as createEvent, h, e as getElement, H as Host } from './index-29df6f59.js';\nimport { b as getIonMode, c as config } from './ionic-global-08f4fb8a.js';\nimport { b as assert } from './helpers-5c745fbd.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-66edb21f.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-685f606a.js';\nimport { a as attachComponent } from './framework-delegate-d1eb6504.js';\nvar VIEW_STATE_NEW = 1;\nvar VIEW_STATE_ATTACHED = 2;\nvar VIEW_STATE_DESTROYED = 3;\nvar ViewController = /** @class */ (function () {\n    function ViewController(component, params) {\n        this.component = component;\n        this.params = params;\n        this.state = VIEW_STATE_NEW;\n    }\n    ViewController.prototype.init = function (container) {\n        return __awaiter(this, void 0, void 0, function () {\n            var component, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        this.state = VIEW_STATE_ATTACHED;\n                        if (!!this.element) return [3 /*break*/, 2];\n                        component = this.component;\n                        _a = this;\n                        return [4 /*yield*/, attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params)];\n                    case 1:\n                        _a.element = _b.sent();\n                        _b.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * DOM WRITE\n     */\n    ViewController.prototype._destroy = function () {\n        assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n        var element = this.element;\n        if (element) {\n            if (this.delegate) {\n                this.delegate.removeViewFromDom(element.parentElement, element);\n            }\n            else {\n                element.remove();\n            }\n        }\n        this.nav = undefined;\n        this.state = VIEW_STATE_DESTROYED;\n    };\n    return ViewController;\n}());\nvar matches = function (view, id, params) {\n    if (!view) {\n        return false;\n    }\n    if (view.component !== id) {\n        return false;\n    }\n    var currentParams = view.params;\n    if (currentParams === params) {\n        return true;\n    }\n    if (!currentParams && !params) {\n        return true;\n    }\n    if (!currentParams || !params) {\n        return false;\n    }\n    var keysA = Object.keys(currentParams);\n    var keysB = Object.keys(params);\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n    // Test for A's keys different from B.\n    for (var _i = 0, keysA_1 = keysA; _i < keysA_1.length; _i++) {\n        var key = keysA_1[_i];\n        if (currentParams[key] !== params[key]) {\n            return false;\n        }\n    }\n    return true;\n};\nvar convertToView = function (page, params) {\n    if (!page) {\n        return null;\n    }\n    if (page instanceof ViewController) {\n        return page;\n    }\n    return new ViewController(page, params);\n};\nvar convertToViews = function (pages) {\n    return pages.map(function (page) {\n        if (page instanceof ViewController) {\n            return page;\n        }\n        if ('page' in page) {\n            return convertToView(page.page, page.params);\n        }\n        return convertToView(page, undefined);\n    }).filter(function (v) { return v !== null; });\n};\nvar navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\nvar Nav = /** @class */ (function () {\n    function Nav(hostRef) {\n        registerInstance(this, hostRef);\n        this.transInstr = [];\n        this.animationEnabled = true;\n        this.useRouter = false;\n        this.isTransitioning = false;\n        this.destroyed = false;\n        this.views = [];\n        /**\n         * If `true`, the nav should animate the transition of components.\n         */\n        this.animated = true;\n        this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n        this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n        this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    }\n    Nav.prototype.swipeGestureChanged = function () {\n        if (this.gesture) {\n            this.gesture.enable(this.swipeGesture === true);\n        }\n    };\n    Nav.prototype.rootChanged = function () {\n        if (this.root !== undefined) {\n            if (!this.useRouter) {\n                this.setRoot(this.root, this.rootParams);\n            }\n        }\n    };\n    Nav.prototype.componentWillLoad = function () {\n        this.useRouter =\n            !!document.querySelector('ion-router') &&\n                !this.el.closest('[no-router]');\n        if (this.swipeGesture === undefined) {\n            var mode = getIonMode(this);\n            this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n        }\n        this.ionNavWillLoad.emit();\n    };\n    Nav.prototype.componentDidLoad = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        this.rootChanged();\n                        _a = this;\n                        return [4 /*yield*/, import('./swipe-back-0a6a44c8.js')];\n                    case 1:\n                        _a.gesture = (_b.sent()).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n                        this.swipeGestureChanged();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Nav.prototype.componentDidUnload = function () {\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n            var view = _a[_i];\n            lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            view._destroy();\n        }\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n        // release swipe back gesture and transition\n        this.transInstr.length = this.views.length = 0;\n        this.destroyed = true;\n    };\n    /**\n     * Push a new component onto the current navigation stack. Pass any additional\n     * information along as an object. This additional information is accessible\n     * through NavParams.\n     *\n     * @param component The component to push onto the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    Nav.prototype.push = function (component, componentProps, opts, done) {\n        return this.queueTrns({\n            insertStart: -1,\n            insertViews: [{ page: component, params: componentProps }],\n            opts: opts\n        }, done);\n    };\n    /**\n     * Inserts a component into the navigation stack at the specified index.\n     * This is useful to add a component at any point in the navigation stack.\n     *\n     * @param insertIndex The index to insert the component at in the stack.\n     * @param component The component to insert into the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    Nav.prototype.insert = function (insertIndex, component, componentProps, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: [{ page: component, params: componentProps }],\n            opts: opts\n        }, done);\n    };\n    /**\n     * Inserts an array of components into the navigation stack at the specified index.\n     * The last component in the array will become instantiated as a view, and animate\n     * in to become the active view.\n     *\n     * @param insertIndex The index to insert the components at in the stack.\n     * @param insertComponents The components to insert into the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    Nav.prototype.insertPages = function (insertIndex, insertComponents, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: insertComponents,\n            opts: opts\n        }, done);\n    };\n    /**\n     * Pop a component off of the navigation stack. Navigates back from the current\n     * component.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    Nav.prototype.pop = function (opts, done) {\n        return this.queueTrns({\n            removeStart: -1,\n            removeCount: 1,\n            opts: opts\n        }, done);\n    };\n    /**\n     * Pop to a specific index in the navigation stack.\n     *\n     * @param indexOrViewCtrl The index or view controller to pop to.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    Nav.prototype.popTo = function (indexOrViewCtrl, opts, done) {\n        var tiConfig = {\n            removeStart: -1,\n            removeCount: -1,\n            opts: opts\n        };\n        if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n            tiConfig.removeView = indexOrViewCtrl;\n            tiConfig.removeStart = 1;\n        }\n        else if (typeof indexOrViewCtrl === 'number') {\n            tiConfig.removeStart = indexOrViewCtrl + 1;\n        }\n        return this.queueTrns(tiConfig, done);\n    };\n    /**\n     * Navigate back to the root of the stack, no matter how far back that is.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    Nav.prototype.popToRoot = function (opts, done) {\n        return this.queueTrns({\n            removeStart: 1,\n            removeCount: -1,\n            opts: opts\n        }, done);\n    };\n    /**\n     * Removes a component from the navigation stack at the specified index.\n     *\n     * @param startIndex The number to begin removal at.\n     * @param removeCount The number of components to remove.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    Nav.prototype.removeIndex = function (startIndex, removeCount, opts, done) {\n        if (removeCount === void 0) { removeCount = 1; }\n        return this.queueTrns({\n            removeStart: startIndex,\n            removeCount: removeCount,\n            opts: opts\n        }, done);\n    };\n    /**\n     * Set the root for the current navigation stack to a component.\n     *\n     * @param component The component to set as the root of the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    Nav.prototype.setRoot = function (component, componentProps, opts, done) {\n        return this.setPages([{ page: component, params: componentProps }], opts, done);\n    };\n    /**\n     * Set the views of the current navigation stack and navigate to the last view.\n     * By default animations are disabled, but they can be enabled by passing options\n     * to the navigation controller. Navigation parameters can also be passed to the\n     * individual pages in the array.\n     *\n     * @param views The list of views to set as the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    Nav.prototype.setPages = function (views, opts, done) {\n        if (opts == null) {\n            opts = {};\n        }\n        // if animation wasn't set to true then default it to NOT animate\n        if (opts.animated !== true) {\n            opts.animated = false;\n        }\n        return this.queueTrns({\n            insertStart: 0,\n            insertViews: views,\n            removeStart: 0,\n            removeCount: -1,\n            opts: opts\n        }, done);\n    };\n    /** @internal */\n    Nav.prototype.setRouteId = function (id, params, direction, animation) {\n        var _this = this;\n        var active = this.getActiveSync();\n        if (matches(active, id, params)) {\n            return Promise.resolve({\n                changed: false,\n                element: active.element\n            });\n        }\n        var resolve;\n        var promise = new Promise(function (r) { return (resolve = r); });\n        var finish;\n        var commonOpts = {\n            updateURL: false,\n            viewIsReady: function (enteringEl) {\n                var mark;\n                var p = new Promise(function (r) { return (mark = r); });\n                resolve({\n                    changed: true,\n                    element: enteringEl,\n                    markVisible: function () { return __awaiter(_this, void 0, void 0, function () {\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    mark();\n                                    return [4 /*yield*/, finish];\n                                case 1:\n                                    _a.sent();\n                                    return [2 /*return*/];\n                            }\n                        });\n                    }); }\n                });\n                return p;\n            }\n        };\n        if (direction === 'root') {\n            finish = this.setRoot(id, params, commonOpts);\n        }\n        else {\n            var viewController = this.views.find(function (v) { return matches(v, id, params); });\n            if (viewController) {\n                finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animationBuilder: animation }));\n            }\n            else if (direction === 'forward') {\n                finish = this.push(id, params, Object.assign(Object.assign({}, commonOpts), { animationBuilder: animation }));\n            }\n            else if (direction === 'back') {\n                finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true, animationBuilder: animation }));\n            }\n        }\n        return promise;\n    };\n    /** @internal */\n    Nav.prototype.getRouteId = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var active;\n            return __generator(this, function (_a) {\n                active = this.getActiveSync();\n                return [2 /*return*/, active\n                        ? {\n                            id: active.element.tagName,\n                            params: active.params,\n                            element: active.element\n                        }\n                        : undefined];\n            });\n        });\n    };\n    /**\n     * Get the active view.\n     */\n    Nav.prototype.getActive = function () {\n        return Promise.resolve(this.getActiveSync());\n    };\n    /**\n     * Get the view at the specified index.\n     *\n     * @param index The index of the view.\n     */\n    Nav.prototype.getByIndex = function (index) {\n        return Promise.resolve(this.views[index]);\n    };\n    /**\n     * Returns `true` if the current view can go back.\n     *\n     * @param view The view to check.\n     */\n    Nav.prototype.canGoBack = function (view) {\n        return Promise.resolve(this.canGoBackSync(view));\n    };\n    /**\n     * Get the previous view.\n     *\n     * @param view The view to get.\n     */\n    Nav.prototype.getPrevious = function (view) {\n        return Promise.resolve(this.getPreviousSync(view));\n    };\n    Nav.prototype.getLength = function () {\n        return this.views.length;\n    };\n    Nav.prototype.getActiveSync = function () {\n        return this.views[this.views.length - 1];\n    };\n    Nav.prototype.canGoBackSync = function (view) {\n        if (view === void 0) { view = this.getActiveSync(); }\n        return !!(view && this.getPreviousSync(view));\n    };\n    Nav.prototype.getPreviousSync = function (view) {\n        if (view === void 0) { view = this.getActiveSync(); }\n        if (!view) {\n            return undefined;\n        }\n        var views = this.views;\n        var index = views.indexOf(view);\n        return index > 0 ? views[index - 1] : undefined;\n    };\n    // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n    // 1. _nextTrns(): consumes the next transition in the queue\n    // 2. _viewInit(): initializes enteringView if required\n    // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n    // 4. _postViewInit(): add/remove the views from the navigation stack\n    // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n    // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n    // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n    // 8. _transitionFinish(): called once the transition finishes\n    // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n    Nav.prototype.queueTrns = function (ti, done) {\n        if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\n            return Promise.resolve(false);\n        }\n        var promise = new Promise(function (resolve, reject) {\n            ti.resolve = resolve;\n            ti.reject = reject;\n        });\n        ti.done = done;\n        // Normalize empty\n        if (ti.insertViews && ti.insertViews.length === 0) {\n            ti.insertViews = undefined;\n        }\n        // Enqueue transition instruction\n        this.transInstr.push(ti);\n        // if there isn't a transition already happening\n        // then this will kick off this transition\n        this.nextTrns();\n        return promise;\n    };\n    Nav.prototype.success = function (result, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        if (ti.done) {\n            ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n        }\n        ti.resolve(result.hasCompleted);\n        if (ti.opts.updateURL !== false && this.useRouter) {\n            var router = document.querySelector('ion-router');\n            if (router) {\n                var direction = result.direction === 'back' ? 'back' : 'forward';\n                router.navChanged(direction);\n            }\n        }\n    };\n    Nav.prototype.failed = function (rejectReason, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        this.transInstr.length = 0;\n        this.fireError(rejectReason, ti);\n    };\n    Nav.prototype.fireError = function (rejectReason, ti) {\n        if (ti.done) {\n            ti.done(false, false, rejectReason);\n        }\n        if (ti.reject && !this.destroyed) {\n            ti.reject(rejectReason);\n        }\n        else {\n            ti.resolve(false);\n        }\n    };\n    Nav.prototype.nextTrns = function () {\n        // this is the framework's bread 'n butta function\n        // only one transition is allowed at any given time\n        if (this.isTransitioning) {\n            return false;\n        }\n        // there is no transition happening right now\n        // get the next instruction\n        var ti = this.transInstr.shift();\n        if (!ti) {\n            return false;\n        }\n        this.runTransition(ti);\n        return true;\n    };\n    Nav.prototype.runTransition = function (ti) {\n        return __awaiter(this, void 0, void 0, function () {\n            var leavingView, enteringView, requiresTransition, isBackDirection, result, _a, rejectReason_1;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _b.trys.push([0, 6, , 7]);\n                        // set that this nav is actively transitioning\n                        this.ionNavWillChange.emit();\n                        this.isTransitioning = true;\n                        this.prepareTI(ti);\n                        leavingView = this.getActiveSync();\n                        enteringView = this.getEnteringView(ti, leavingView);\n                        if (!leavingView && !enteringView) {\n                            throw new Error('no views in the stack to be removed');\n                        }\n                        if (!(enteringView && enteringView.state === VIEW_STATE_NEW)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, enteringView.init(this.el)];\n                    case 1:\n                        _b.sent();\n                        _b.label = 2;\n                    case 2:\n                        this.postViewInit(enteringView, leavingView, ti);\n                        requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\n                            enteringView !== leavingView;\n                        if (requiresTransition && ti.opts && leavingView) {\n                            isBackDirection = ti.opts.direction === 'back';\n                            /**\n                             * If heading back, use the entering page's animation\n                             * unless otherwise specified by the developer.\n                             */\n                            if (isBackDirection) {\n                                ti.opts.animationBuilder = ti.opts.animationBuilder || (enteringView && enteringView.animationBuilder);\n                            }\n                            leavingView.animationBuilder = ti.opts.animationBuilder;\n                        }\n                        if (!requiresTransition) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.transition(enteringView, leavingView, ti)];\n                    case 3:\n                        _a = _b.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        _a = {\n                            // transition is not required, so we are already done!\n                            // they're inserting/removing the views somewhere in the middle or\n                            // beginning, so visually nothing needs to animate/transition\n                            // resolve immediately because there's no animation that's happening\n                            hasCompleted: true,\n                            requiresTransition: false\n                        };\n                        _b.label = 5;\n                    case 5:\n                        result = _a;\n                        this.success(result, ti);\n                        this.ionNavDidChange.emit();\n                        return [3 /*break*/, 7];\n                    case 6:\n                        rejectReason_1 = _b.sent();\n                        this.failed(rejectReason_1, ti);\n                        return [3 /*break*/, 7];\n                    case 7:\n                        this.isTransitioning = false;\n                        this.nextTrns();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Nav.prototype.prepareTI = function (ti) {\n        var viewsLength = this.views.length;\n        ti.opts = ti.opts || {};\n        if (ti.opts.delegate === undefined) {\n            ti.opts.delegate = this.delegate;\n        }\n        if (ti.removeView !== undefined) {\n            assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n            assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n            var index = this.views.indexOf(ti.removeView);\n            if (index < 0) {\n                throw new Error('removeView was not found');\n            }\n            ti.removeStart += index;\n        }\n        if (ti.removeStart !== undefined) {\n            if (ti.removeStart < 0) {\n                ti.removeStart = viewsLength - 1;\n            }\n            if (ti.removeCount < 0) {\n                ti.removeCount = viewsLength - ti.removeStart;\n            }\n            ti.leavingRequiresTransition =\n                ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n        }\n        if (ti.insertViews) {\n            // allow -1 to be passed in to auto push it on the end\n            // and clean up the index if it's larger then the size of the stack\n            if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n                ti.insertStart = viewsLength;\n            }\n            ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n        }\n        var insertViews = ti.insertViews;\n        if (!insertViews) {\n            return;\n        }\n        assert(insertViews.length > 0, 'length can not be zero');\n        var viewControllers = convertToViews(insertViews);\n        if (viewControllers.length === 0) {\n            throw new Error('invalid views to insert');\n        }\n        // Check all the inserted view are correct\n        for (var _i = 0, viewControllers_1 = viewControllers; _i < viewControllers_1.length; _i++) {\n            var view = viewControllers_1[_i];\n            view.delegate = ti.opts.delegate;\n            var nav = view.nav;\n            if (nav && nav !== this) {\n                throw new Error('inserted view was already inserted');\n            }\n            if (view.state === VIEW_STATE_DESTROYED) {\n                throw new Error('inserted view was already destroyed');\n            }\n        }\n        ti.insertViews = viewControllers;\n    };\n    Nav.prototype.getEnteringView = function (ti, leavingView) {\n        var insertViews = ti.insertViews;\n        if (insertViews !== undefined) {\n            // grab the very last view of the views to be inserted\n            // and initialize it as the new entering view\n            return insertViews[insertViews.length - 1];\n        }\n        var removeStart = ti.removeStart;\n        if (removeStart !== undefined) {\n            var views = this.views;\n            var removeEnd = removeStart + ti.removeCount;\n            for (var i = views.length - 1; i >= 0; i--) {\n                var view = views[i];\n                if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n                    return view;\n                }\n            }\n        }\n        return undefined;\n    };\n    Nav.prototype.postViewInit = function (enteringView, leavingView, ti) {\n        assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n        assert(ti.resolve, 'resolve must be valid');\n        assert(ti.reject, 'reject must be valid');\n        var opts = ti.opts;\n        var insertViews = ti.insertViews;\n        var removeStart = ti.removeStart;\n        var removeCount = ti.removeCount;\n        var destroyQueue;\n        // there are views to remove\n        if (removeStart !== undefined && removeCount !== undefined) {\n            assert(removeStart >= 0, 'removeStart can not be negative');\n            assert(removeCount >= 0, 'removeCount can not be negative');\n            destroyQueue = [];\n            for (var i = 0; i < removeCount; i++) {\n                var view = this.views[i + removeStart];\n                if (view && view !== enteringView && view !== leavingView) {\n                    destroyQueue.push(view);\n                }\n            }\n            // default the direction to \"back\"\n            opts.direction = opts.direction || 'back';\n        }\n        var finalBalance = this.views.length +\n            (insertViews !== undefined ? insertViews.length : 0) -\n            (removeCount !== undefined ? removeCount : 0);\n        assert(finalBalance >= 0, 'final balance can not be negative');\n        if (finalBalance === 0) {\n            console.warn(\"You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.\", this, this.el);\n            throw new Error('navigation stack needs at least one root page');\n        }\n        // At this point the transition can not be rejected, any throw should be an error\n        // there are views to insert\n        if (insertViews) {\n            // add the views to the\n            var insertIndex = ti.insertStart;\n            for (var _i = 0, insertViews_1 = insertViews; _i < insertViews_1.length; _i++) {\n                var view = insertViews_1[_i];\n                this.insertViewAt(view, insertIndex);\n                insertIndex++;\n            }\n            if (ti.enteringRequiresTransition) {\n                // default to forward if not already set\n                opts.direction = opts.direction || 'forward';\n            }\n        }\n        // if the views to be removed are in the beginning or middle\n        // and there is not a view that needs to visually transition out\n        // then just destroy them and don't transition anything\n        // batch all of lifecycles together\n        // let's make sure, callbacks are zoned\n        if (destroyQueue && destroyQueue.length > 0) {\n            for (var _a = 0, destroyQueue_1 = destroyQueue; _a < destroyQueue_1.length; _a++) {\n                var view = destroyQueue_1[_a];\n                lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n                lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n                lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            }\n            // once all lifecycle events has been delivered, we can safely detroy the views\n            for (var _b = 0, destroyQueue_2 = destroyQueue; _b < destroyQueue_2.length; _b++) {\n                var view = destroyQueue_2[_b];\n                this.destroyView(view);\n            }\n        }\n    };\n    Nav.prototype.transition = function (enteringView, leavingView, ti) {\n        return __awaiter(this, void 0, void 0, function () {\n            var opts, progressCallback, mode, enteringEl, leavingEl, animationOpts, hasCompleted;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        opts = ti.opts;\n                        progressCallback = opts.progressAnimation\n                            ? function (ani) { return _this.sbAni = ani; }\n                            : undefined;\n                        mode = getIonMode(this);\n                        enteringEl = enteringView.element;\n                        leavingEl = leavingView && leavingView.element;\n                        animationOpts = Object.assign({ mode: mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, animationBuilder: this.animation || opts.animationBuilder || config.get('navAnimation'), progressCallback: progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl: enteringEl,\n                            leavingEl: leavingEl }, opts);\n                        return [4 /*yield*/, transition(animationOpts)];\n                    case 1:\n                        hasCompleted = (_a.sent()).hasCompleted;\n                        return [2 /*return*/, this.transitionFinish(hasCompleted, enteringView, leavingView, opts)];\n                }\n            });\n        });\n    };\n    Nav.prototype.transitionFinish = function (hasCompleted, enteringView, leavingView, opts) {\n        var cleanupView = hasCompleted ? enteringView : leavingView;\n        if (cleanupView) {\n            this.cleanup(cleanupView);\n        }\n        return {\n            hasCompleted: hasCompleted,\n            requiresTransition: true,\n            enteringView: enteringView,\n            leavingView: leavingView,\n            direction: opts.direction\n        };\n    };\n    Nav.prototype.insertViewAt = function (view, index) {\n        var views = this.views;\n        var existingIndex = views.indexOf(view);\n        if (existingIndex > -1) {\n            // this view is already in the stack!!\n            // move it to its new location\n            assert(view.nav === this, 'view is not part of the nav');\n            views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n        }\n        else {\n            assert(!view.nav, 'nav is used');\n            // this is a new view to add to the stack\n            // create the new entering view\n            view.nav = this;\n            // insert the entering view into the correct index in the stack\n            views.splice(index, 0, view);\n        }\n    };\n    Nav.prototype.removeView = function (view) {\n        assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n        var views = this.views;\n        var index = views.indexOf(view);\n        assert(index > -1, 'view must be part of the stack');\n        if (index >= 0) {\n            views.splice(index, 1);\n        }\n    };\n    Nav.prototype.destroyView = function (view) {\n        view._destroy();\n        this.removeView(view);\n    };\n    /**\n     * DOM WRITE\n     */\n    Nav.prototype.cleanup = function (activeView) {\n        // ok, cleanup time!! Destroy all of the views that are\n        // INACTIVE and come after the active view\n        // only do this if the views exist, though\n        if (this.destroyed) {\n            return;\n        }\n        var views = this.views;\n        var activeViewIndex = views.indexOf(activeView);\n        for (var i = views.length - 1; i >= 0; i--) {\n            var view = views[i];\n            var element = view.element;\n            if (i > activeViewIndex) {\n                // this view comes after the active view\n                // let's unload it\n                lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n                this.destroyView(view);\n            }\n            else if (i < activeViewIndex) {\n                // this view comes before the active view\n                // and it is not a portal then ensure it is hidden\n                setPageHidden(element, true);\n            }\n        }\n    };\n    Nav.prototype.canStart = function () {\n        return (!!this.swipeGesture &&\n            !this.isTransitioning &&\n            this.transInstr.length === 0 &&\n            this.animationEnabled &&\n            this.canGoBackSync());\n    };\n    Nav.prototype.onStart = function () {\n        this.queueTrns({\n            removeStart: -1,\n            removeCount: 1,\n            opts: {\n                direction: 'back',\n                progressAnimation: true\n            }\n        }, undefined);\n    };\n    Nav.prototype.onMove = function (stepValue) {\n        if (this.sbAni) {\n            this.sbAni.progressStep(stepValue);\n        }\n    };\n    Nav.prototype.onEnd = function (shouldComplete, stepValue, dur) {\n        var _this = this;\n        if (this.sbAni) {\n            this.animationEnabled = false;\n            this.sbAni.onFinish(function () {\n                _this.animationEnabled = true;\n            }, { oneTimeCallback: true });\n            // Account for rounding errors in JS\n            var newStepValue = (shouldComplete) ? -0.001 : 0.001;\n            /**\n             * Animation will be reversed here, so need to\n             * reverse the easing curve as well\n             *\n             * Additionally, we need to account for the time relative\n             * to the new easing curve, as `stepValue` is going to be given\n             * in terms of a linear curve.\n             */\n            if (!shouldComplete) {\n                this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n                newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n            }\n            else {\n                newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n            }\n            this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n        }\n    };\n    Nav.prototype.render = function () {\n        return (h(\"slot\", null));\n    };\n    Object.defineProperty(Nav.prototype, \"el\", {\n        get: function () { return getElement(this); },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Nav, \"watchers\", {\n        get: function () {\n            return {\n                \"swipeGesture\": [\"swipeGestureChanged\"],\n                \"root\": [\"rootChanged\"]\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Nav;\n}());\nNav.style = navCss;\nvar navLink = function (el, routerDirection, component, componentProps, routerAnimation) {\n    var nav = el.closest('ion-nav');\n    if (nav) {\n        if (routerDirection === 'forward') {\n            if (component !== undefined) {\n                return nav.push(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\n            }\n        }\n        else if (routerDirection === 'root') {\n            if (component !== undefined) {\n                return nav.setRoot(component, componentProps, { skipIfBusy: true, animationBuilder: routerAnimation });\n            }\n        }\n        else if (routerDirection === 'back') {\n            return nav.pop({ skipIfBusy: true, animationBuilder: routerAnimation });\n        }\n    }\n    return Promise.resolve(false);\n};\nvar NavLink = /** @class */ (function () {\n    function NavLink(hostRef) {\n        var _this = this;\n        registerInstance(this, hostRef);\n        /**\n         * The transition direction when navigating to another page.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = function () {\n            return navLink(_this.el, _this.routerDirection, _this.component, _this.componentProps, _this.routerAnimation);\n        };\n    }\n    NavLink.prototype.render = function () {\n        return (h(Host, { onClick: this.onClick }));\n    };\n    Object.defineProperty(NavLink.prototype, \"el\", {\n        get: function () { return getElement(this); },\n        enumerable: false,\n        configurable: true\n    });\n    return NavLink;\n}());\nexport { Nav as ion_nav, NavLink as ion_nav_link };\n"]},"metadata":{},"sourceType":"module"}