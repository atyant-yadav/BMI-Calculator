{"ast":null,"code":"var KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\nvar KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\nvar KEYBOARD_THRESHOLD = 150;\nvar previousVisualViewport = {};\nvar currentVisualViewport = {};\nvar previousLayoutViewport = {};\nvar currentLayoutViewport = {};\nvar keyboardOpen = false;\n/**\n * This is only used for tests\n */\n\nvar resetKeyboardAssist = function resetKeyboardAssist() {\n  previousVisualViewport = {};\n  currentVisualViewport = {};\n  previousLayoutViewport = {};\n  currentLayoutViewport = {};\n  keyboardOpen = false;\n};\n\nvar startKeyboardAssist = function startKeyboardAssist(win) {\n  startNativeListeners(win);\n\n  if (!win.visualViewport) {\n    return;\n  }\n\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\n  currentLayoutViewport = copyLayoutViewport(win);\n\n  win.visualViewport.onresize = function () {\n    trackViewportChanges(win);\n\n    if (keyboardDidOpen() || keyboardDidResize(win)) {\n      setKeyboardOpen(win);\n    } else if (keyboardDidClose(win)) {\n      setKeyboardClose(win);\n    }\n  };\n};\n/**\n * Listen for events fired by native keyboard plugin\n * in Capacitor/Cordova so devs only need to listen\n * in one place.\n */\n\n\nvar startNativeListeners = function startNativeListeners(win) {\n  win.addEventListener('keyboardDidShow', function (ev) {\n    return setKeyboardOpen(win, ev);\n  });\n  win.addEventListener('keyboardDidHide', function () {\n    return setKeyboardClose(win);\n  });\n};\n\nvar setKeyboardOpen = function setKeyboardOpen(win, ev) {\n  fireKeyboardOpenEvent(win, ev);\n  keyboardOpen = true;\n};\n\nvar setKeyboardClose = function setKeyboardClose(win) {\n  fireKeyboardCloseEvent(win);\n  keyboardOpen = false;\n};\n/**\n * Returns `true` if the `keyboardOpen` flag is not\n * set, the previous visual viewport width equal the current\n * visual viewport width, and if the scaled difference\n * of the previous visual viewport height minus the current\n * visual viewport height is greater than KEYBOARD_THRESHOLD\n *\n * We need to be able to accomodate users who have zooming\n * enabled in their browser (or have zoomed in manually) which\n * is why we take into account the current visual viewport's\n * scale value.\n */\n\n\nvar keyboardDidOpen = function keyboardDidOpen() {\n  var scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\n  return !keyboardOpen && previousVisualViewport.width === currentVisualViewport.width && scaledHeightDifference > KEYBOARD_THRESHOLD && !layoutViewportDidChange();\n};\n/**\n * Returns `true` if the keyboard is open,\n * but the keyboard did not close\n */\n\n\nvar keyboardDidResize = function keyboardDidResize(win) {\n  return keyboardOpen && !keyboardDidClose(win);\n};\n/**\n * Determine if the keyboard was closed\n * Returns `true` if the `keyboardOpen` flag is set and\n * the current visual viewport height equals the\n * layout viewport height.\n */\n\n\nvar keyboardDidClose = function keyboardDidClose(win) {\n  return keyboardOpen && currentVisualViewport.height === win.innerHeight;\n};\n/**\n * Determine if the layout viewport has\n * changed since the last visual viewport change.\n * It is rare that a layout viewport change is not\n * associated with a visual viewport change so we\n * want to make sure we don't get any false positives.\n */\n\n\nvar layoutViewportDidChange = function layoutViewportDidChange() {\n  return currentLayoutViewport.width !== previousLayoutViewport.width || currentLayoutViewport.height !== previousLayoutViewport.height;\n};\n/**\n * Dispatch a keyboard open event\n */\n\n\nvar fireKeyboardOpenEvent = function fireKeyboardOpenEvent(win, nativeEv) {\n  var keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\n  var ev = new CustomEvent(KEYBOARD_DID_OPEN, {\n    detail: {\n      keyboardHeight: keyboardHeight\n    }\n  });\n  win.dispatchEvent(ev);\n};\n/**\n * Dispatch a keyboard close event\n */\n\n\nvar fireKeyboardCloseEvent = function fireKeyboardCloseEvent(win) {\n  var ev = new CustomEvent(KEYBOARD_DID_CLOSE);\n  win.dispatchEvent(ev);\n};\n/**\n * Given a window object, create a copy of\n * the current visual and layout viewport states\n * while also preserving the previous visual and\n * layout viewport states\n */\n\n\nvar trackViewportChanges = function trackViewportChanges(win) {\n  previousVisualViewport = Object.assign({}, currentVisualViewport);\n  currentVisualViewport = copyVisualViewport(win.visualViewport);\n  previousLayoutViewport = Object.assign({}, currentLayoutViewport);\n  currentLayoutViewport = copyLayoutViewport(win);\n};\n/**\n * Creates a deep copy of the visual viewport\n * at a given state\n */\n\n\nvar copyVisualViewport = function copyVisualViewport(visualViewport) {\n  return {\n    width: Math.round(visualViewport.width),\n    height: Math.round(visualViewport.height),\n    offsetTop: visualViewport.offsetTop,\n    offsetLeft: visualViewport.offsetLeft,\n    pageTop: visualViewport.pageTop,\n    pageLeft: visualViewport.pageLeft,\n    scale: visualViewport.scale\n  };\n};\n/**\n * Creates a deep copy of the layout viewport\n * at a given state\n */\n\n\nvar copyLayoutViewport = function copyLayoutViewport(win) {\n  return {\n    width: win.innerWidth,\n    height: win.innerHeight\n  };\n};\n\nexport { KEYBOARD_DID_CLOSE, KEYBOARD_DID_OPEN, copyLayoutViewport, copyVisualViewport, keyboardDidClose, keyboardDidOpen, keyboardDidResize, resetKeyboardAssist, setKeyboardClose, setKeyboardOpen, startKeyboardAssist, trackViewportChanges };","map":{"version":3,"sources":["/home/bigboy/Study/development/react+ionic/ionic-react/node_modules/@ionic/core/dist/esm-es5/keyboard-a2b5e51d.js"],"names":["KEYBOARD_DID_OPEN","KEYBOARD_DID_CLOSE","KEYBOARD_THRESHOLD","previousVisualViewport","currentVisualViewport","previousLayoutViewport","currentLayoutViewport","keyboardOpen","resetKeyboardAssist","startKeyboardAssist","win","startNativeListeners","visualViewport","copyVisualViewport","copyLayoutViewport","onresize","trackViewportChanges","keyboardDidOpen","keyboardDidResize","setKeyboardOpen","keyboardDidClose","setKeyboardClose","addEventListener","ev","fireKeyboardOpenEvent","fireKeyboardCloseEvent","scaledHeightDifference","height","scale","width","layoutViewportDidChange","innerHeight","nativeEv","keyboardHeight","CustomEvent","detail","dispatchEvent","Object","assign","Math","round","offsetTop","offsetLeft","pageTop","pageLeft","innerWidth"],"mappings":"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","sourcesContent":["var KEYBOARD_DID_OPEN = 'ionKeyboardDidShow';\nvar KEYBOARD_DID_CLOSE = 'ionKeyboardDidHide';\nvar KEYBOARD_THRESHOLD = 150;\nvar previousVisualViewport = {};\nvar currentVisualViewport = {};\nvar previousLayoutViewport = {};\nvar currentLayoutViewport = {};\nvar keyboardOpen = false;\n/**\n * This is only used for tests\n */\nvar resetKeyboardAssist = function () {\n    previousVisualViewport = {};\n    currentVisualViewport = {};\n    previousLayoutViewport = {};\n    currentLayoutViewport = {};\n    keyboardOpen = false;\n};\nvar startKeyboardAssist = function (win) {\n    startNativeListeners(win);\n    if (!win.visualViewport) {\n        return;\n    }\n    currentVisualViewport = copyVisualViewport(win.visualViewport);\n    currentLayoutViewport = copyLayoutViewport(win);\n    win.visualViewport.onresize = function () {\n        trackViewportChanges(win);\n        if (keyboardDidOpen() || keyboardDidResize(win)) {\n            setKeyboardOpen(win);\n        }\n        else if (keyboardDidClose(win)) {\n            setKeyboardClose(win);\n        }\n    };\n};\n/**\n * Listen for events fired by native keyboard plugin\n * in Capacitor/Cordova so devs only need to listen\n * in one place.\n */\nvar startNativeListeners = function (win) {\n    win.addEventListener('keyboardDidShow', function (ev) { return setKeyboardOpen(win, ev); });\n    win.addEventListener('keyboardDidHide', function () { return setKeyboardClose(win); });\n};\nvar setKeyboardOpen = function (win, ev) {\n    fireKeyboardOpenEvent(win, ev);\n    keyboardOpen = true;\n};\nvar setKeyboardClose = function (win) {\n    fireKeyboardCloseEvent(win);\n    keyboardOpen = false;\n};\n/**\n * Returns `true` if the `keyboardOpen` flag is not\n * set, the previous visual viewport width equal the current\n * visual viewport width, and if the scaled difference\n * of the previous visual viewport height minus the current\n * visual viewport height is greater than KEYBOARD_THRESHOLD\n *\n * We need to be able to accomodate users who have zooming\n * enabled in their browser (or have zoomed in manually) which\n * is why we take into account the current visual viewport's\n * scale value.\n */\nvar keyboardDidOpen = function () {\n    var scaledHeightDifference = (previousVisualViewport.height - currentVisualViewport.height) * currentVisualViewport.scale;\n    return (!keyboardOpen &&\n        previousVisualViewport.width === currentVisualViewport.width &&\n        scaledHeightDifference > KEYBOARD_THRESHOLD &&\n        !layoutViewportDidChange());\n};\n/**\n * Returns `true` if the keyboard is open,\n * but the keyboard did not close\n */\nvar keyboardDidResize = function (win) {\n    return keyboardOpen && !keyboardDidClose(win);\n};\n/**\n * Determine if the keyboard was closed\n * Returns `true` if the `keyboardOpen` flag is set and\n * the current visual viewport height equals the\n * layout viewport height.\n */\nvar keyboardDidClose = function (win) {\n    return keyboardOpen && currentVisualViewport.height === win.innerHeight;\n};\n/**\n * Determine if the layout viewport has\n * changed since the last visual viewport change.\n * It is rare that a layout viewport change is not\n * associated with a visual viewport change so we\n * want to make sure we don't get any false positives.\n */\nvar layoutViewportDidChange = function () {\n    return (currentLayoutViewport.width !== previousLayoutViewport.width ||\n        currentLayoutViewport.height !== previousLayoutViewport.height);\n};\n/**\n * Dispatch a keyboard open event\n */\nvar fireKeyboardOpenEvent = function (win, nativeEv) {\n    var keyboardHeight = nativeEv ? nativeEv.keyboardHeight : win.innerHeight - currentVisualViewport.height;\n    var ev = new CustomEvent(KEYBOARD_DID_OPEN, {\n        detail: { keyboardHeight: keyboardHeight }\n    });\n    win.dispatchEvent(ev);\n};\n/**\n * Dispatch a keyboard close event\n */\nvar fireKeyboardCloseEvent = function (win) {\n    var ev = new CustomEvent(KEYBOARD_DID_CLOSE);\n    win.dispatchEvent(ev);\n};\n/**\n * Given a window object, create a copy of\n * the current visual and layout viewport states\n * while also preserving the previous visual and\n * layout viewport states\n */\nvar trackViewportChanges = function (win) {\n    previousVisualViewport = Object.assign({}, currentVisualViewport);\n    currentVisualViewport = copyVisualViewport(win.visualViewport);\n    previousLayoutViewport = Object.assign({}, currentLayoutViewport);\n    currentLayoutViewport = copyLayoutViewport(win);\n};\n/**\n * Creates a deep copy of the visual viewport\n * at a given state\n */\nvar copyVisualViewport = function (visualViewport) {\n    return {\n        width: Math.round(visualViewport.width),\n        height: Math.round(visualViewport.height),\n        offsetTop: visualViewport.offsetTop,\n        offsetLeft: visualViewport.offsetLeft,\n        pageTop: visualViewport.pageTop,\n        pageLeft: visualViewport.pageLeft,\n        scale: visualViewport.scale\n    };\n};\n/**\n * Creates a deep copy of the layout viewport\n * at a given state\n */\nvar copyLayoutViewport = function (win) {\n    return {\n        width: win.innerWidth,\n        height: win.innerHeight\n    };\n};\nexport { KEYBOARD_DID_CLOSE, KEYBOARD_DID_OPEN, copyLayoutViewport, copyVisualViewport, keyboardDidClose, keyboardDidOpen, keyboardDidResize, resetKeyboardAssist, setKeyboardClose, setKeyboardOpen, startKeyboardAssist, trackViewportChanges };\n"]},"metadata":{},"sourceType":"module"}